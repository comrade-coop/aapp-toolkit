server {
    listen 80;
    server_name __AAPPHOSTNAME__;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name __AAPPHOSTNAME__;

    # SSL certificate and key
    ssl_certificate /root/aapp-toolkit/bootstrap/fullchain.pem;
    ssl_certificate_key /root/aapp-toolkit/__AAPPHOSTNAME__.key;

    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_pass http://0.0.0.0:__AAPPPORT__;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /.well-known/attest/reference {
        alias /var/www/html/reference.json;
        default_type application/json;
        try_files $uri $uri/ =404;

        add_header Access-Control-Allow-Origin "*" always;
    }

    location /.well-known/attest/view {
        alias /var/www/html/index.html;
        default_type text/html;
        try_files $uri $uri/ =404;
    }

    location /.well-known/attest/token {
        # Extract the 'nonce' parameter from the query string
        set $nonce "";
        if ($arg_nonce) {
            set $nonce $arg_nonce;
        }

        # Check if the nonce parameter is available
        if ($nonce = "") {
            return 400 "Nonce parameter is required.";
        }

        default_type application/json;

        # Call the bash script with the nonce as an argument
        set $script_output "";
        content_by_lua_block {
            local nonce = ngx.var.nonce
            local handle = io.popen('/var/www/html/token.sh ' .. nonce)
            local result = handle:read("*a")
            handle:close()
            ngx.say(result)
        }

        add_header Access-Control-Allow-Origin "*" always;
    }
}