name: 'Azure VM Creation Action'
description: 'Creates an Azure VM in a specified resource group'
author: 'Comrade Cooperative'
branding:
  icon: 'cloud'
  color: 'blue'
inputs:
  client_id:
    description: 'Azure App Registration Client ID'
    required: true
  client_secret:
    description: 'Azure App Registration Client Secret'
    required: true
  subscription_id:
    description: 'Azure Subscription ID'
    required: true
  tenant_id:
    description: 'Azure Tenant ID'
    required: true
  resource_group:
    description: 'Azure Resource Group Name'
    required: true
  vm_name:
    description: 'Name for the new VM'
    required: true
  vm_network_id:
    description: 'Azure VM Network ID'
    required: true
  vm_ssh_enabled:
    description: 'Enable SSH access to VM (dev environment only)'
    required: true
  vm_dev_key:
    description: 'Azure VM Development Key'
    required: true
  aapp_manifest:
    description: 'Path to YAML file containing VM initialization data'
    required: true
  certbot_email:
    description: 'Email for certbot certificate issuing'
    required: true
  current_job_url:
    description: 'Link to the logs of the current GitHub job'
    required: true
outputs:
  vm_id:
    description: 'The unique identifier of the created VM'
  vm_ip:
    description: 'The public IP address of the created VM'
runs:
  using: 'composite'
  steps:
    - shell: bash
      id: create_vm
      run: |
        output_file="${RUNNER_TEMP}/vm_output.json"
        if [ "${{ inputs.vm_ssh_enabled }}" = "true" ]; then
          cloud_init="${{ github.action_path }}/../image/cloud-init-ssh.yml"
        else
          cloud_init="${{ github.action_path }}/../image/cloud-init.yml"
        fi
        arm_template="${{ github.action_path }}/template.json"
        
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

        az login --service-principal \
            --username "${{ inputs.client_id }}" \
            --password "${{ inputs.client_secret }}" \
            --tenant "${{ inputs.tenant_id }}"
        az account set --subscription "${{ inputs.subscription_id }}"

        az deployment group create \
            --resource-group ${{ inputs.resource_group }} \
            --template-file $arm_template \
            --parameters \
                        virtualMachineName="${{ inputs.vm_name }}" \
                        virtualNetworkId="${{ inputs.vm_network_id }}" \
                        subnetName="default" \
                        sshKeyName="${{ inputs.vm_dev_key }}" \
                        userData=@${{ inputs.aapp_manifest }} \
                        customData=@$cloud_init > $output_file
        echo "VM creation completed successfully: $output_file"
        
        public_ip=$(jq -r '.properties.outputs.publicIpAddress.value' $output_file)
        vm_id=$(jq -r '.properties.outputs.virtualMachineId.value' $output_file)
        
        # Set the values as step outputs (using the recommended $GITHUB_OUTPUT method)
        echo "publicIp=${public_ip}" >> $GITHUB_OUTPUT
        echo "vmId=${vm_id}" >> $GITHUB_OUTPUT

    - shell: bash 
      name: Wait for 5 minutes
      run: sleep 300

    - shell: bash
      name: Fetch csr and create cert.csr
      run: |
        # Perform GET request to the server
        response=$(curl -s "http://${{ steps.create_vm.outputs.publicIp }}:12345")
        echo "Server response: $response"

        # Extract the 'csr' value from the JSON response using jq
        csr=$(echo "$response" | jq -r '.csr')
        echo "Extracted csr: $csr"

        # Base64 decode the csr and save it as cert.csr
        echo "$csr" | base64 --decode > "${RUNNER_TEMP}/cert.csr"

    - shell: bash
      name: Install dependencies (Certbot and dig)
      run: |
        sudo apt-get update
        sudo apt-get install -y certbot dnsutils

    - shell: bash 
      name: Ensure hook script is executable
      run: chmod +x ${{ github.action_path }}/dns-hook.sh

    - shell: bash
      name: Run Certbot in manual mode with DNS challenge
      run: |
        LOG_FILE="${RUNNER_TEMP}/dns-hook.log"
        touch "$LOG_FILE"

        sudo -E HOOK_LOG="$LOG_FILE" certbot certonly \
                  --manual \
                  --preferred-challenges dns \
                  --non-interactive \
                  --agree-tos \
                  --email "${{ inputs.certbot_email }}" \
                  --manual-auth-hook "${{ github.action_path }}/dns-hook.sh" \
                  --csr "${RUNNER_TEMP}/cert.csr" &
        CERTBOT_PID=$!

        tail -f "$LOG_FILE" --pid="$CERTBOT_PID"
        wait "$CERTBOT_PID"

    - shell: bash
      name: Send Base64 Encoded Cert via POST Request
      run: |
        AAPPMANIFESTSHA1=$(sha1sum ${{ inputs.aapp_manifest }} | awk '{print $1}')
        AAPPCERTSHA1=$(awk '
          /-----BEGIN CERTIFICATE-----/ {flag=1}
          flag {print}
          /-----END CERTIFICATE-----/ {flag=0; exit}
        ' 0001_chain.pem | openssl x509 -noout -fingerprint -sha1 | sed 's/^.*=//; s/://g' | tr '[:upper:]' '[:lower:]')

        AAPPRUNURL=$(echo '${{ inputs.current_job_url }}' | jq -r .)

        REFERENCE_JSON=$(sed \
            -e "s/__VMID__/${{ steps.create_vm.outputs.vmId }}/g" \
            -e "s/__AAPPMANIFESTSHA1__/$AAPPMANIFESTSHA1/g" \
            -e "s/__AAPPCERTSHA1__/$AAPPCERTSHA1/g" \
            -e "s#__AAPPRUNURL__#$AAPPRUNURL#g" \
            ${{ github.action_path }}/../image/reference.json)
        
        echo -e "\n==== Azure Attestation Reference State ====\n"
        echo -e "This file can be accessed under the following path: /.well-known/attest/reference\n"
        echo "$REFERENCE_JSON" | jq .

        REFERENCE_B64=$(echo -n "$REFERENCE_JSON" | base64 -w 0)
        CERT_B64=$(base64 -w 0 0001_chain.pem)

        # Create JSON payload with both cert and reference
        JSON_PAYLOAD=$(jq -n --arg cert "$CERT_B64" --arg reference "$REFERENCE_B64" '{cert: $cert, reference: $reference}')

        echo Reference measurements generated during build
        echo $JSON_PAYLOAD

        curl -X POST "http://${{ steps.create_vm.outputs.publicIp }}:12345" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD"